//自动保存时间间隔
var timerSave = 20000;
var push2Parents = [];
var isDesignerMode = true;

function configurationElm(e, t) {
	$(".demo").delegate(".configuration > a", "click",
		function (e) {
			e.preventDefault();
			var t = $(this).parent().next().next().children();
			$(this).toggleClass("active");
			t.toggleClass($(this).attr("rel"))
		});
	$(".demo").delegate(".configuration .dropdown-menu a", "click",
		function (e) {
			e.preventDefault();
			var t = $(this).parent().parent();
			var n = t.parent().parent().next().next().children();
			t.find("li").removeClass("active");
			$(this).parent().addClass("active");
			var r = "";
			t.find("a").each(function () {
				r += $(this).attr("rel") + " "
			});
			t.parent().removeClass("open");
			n.removeClass(r);
			n.addClass($(this).attr("rel"))
		})
}

function clearDemo() {
	$(".demo").empty()
}

function changeStructure(e, t) {
	$("#download-layout ." + e).removeClass(e).addClass(t)
}
function cleanHtml(e) {
	$(e).parent().append($(e).children().html());
	$(e).remove();
}

var currentDocument = null;
var timerSave = 2e3;
var demoHtml = $(".demo").html();
var currenteditor = null;
var moduleObj = new ModuleObject();
var tagType = "";//当前组件类型
var properties = [];//当前组件属性
var configPanel;//数据字段配置面板
var isBind = false;//是否绑定数据源
var tagComponent = null;

var isDraggableFlag = false;//组件拖动标志，如果组件执行了draggable则标志为true，否则为false



function componentStop(item) {
	var id = $(item).find("div.view:first div[type]:first").attr('compid'),
		tagType = $(item).find("div.view:first div[type]:first").attr('type');

	if (!id) {
		id = clickDemoView($(item).find("div.view:first"));
	}
	/*用控件的id关联label和控件（用于后面流程数据权限的操作）*/
	//if($(item).attr("node") == "node"){
	//	var relatedId = $($(item).find('div.view')[2]).children().children().attr("id");
	//	$($(item).find('div.view')[1]).children().attr("relatedatrrbutes",relatedId);
	//}
	//
	setTimeout(function() {
		if (tagType === "layout") {
			$.bfd.guide.bindCranberry($.bfd.guide.layout);
		}

		if (tagType === "table_base" || tagType === "table_base_local") {
			$.bfd.guide.bindCranberry($.bfd.guide.table);
		}

		if (tagType === "tree") {
			$.bfd.guide.bindCranberry($.bfd.guide.tree);
		}

		if (tagType === "button" || tagType === "toolbar-button") {
			$.bfd.guide.bindCranberry($.bfd.guide.button);
		}

	}, 200);
	

	if (typeof id !== "undefined") {
		$("#" + id).btnGroup('init');
	}

	if (typeof id !== "undefined" && id.indexOf("input_datetime") > -1) {
		initDatetimePicker($(item).find("div.view").find(".form_time"));
	}

	if (typeof (id) != "undefined" && id.indexOf("tree") > -1) {
		initZTreeObjectForDesigner(id);
	}

	if (typeof (id) !== "undefined" && id.indexOf("layoutitWaypoint") > -1) {
		initWaypoint(id);
	}

	if (typeof (id) !== "undefined" && id.indexOf("chinese_region") > -1) {
		initChineseRegion(id);
	}

	if (typeof (id) !== "undefined" && id.indexOf("user_defined_component") > -1) {
		var userComponent = new UserDefinedComponentInst($("[compid=" + id + "]"));
		userComponent.updateComponentHTML();
	}

	if (typeof (id) !== "undefined" && id.indexOf("m_complex_component") > -1) {
		$("[compid=" + id + "]").updateComplexComponent();
	}

	if (typeof (id) !== "undefined" && id.indexOf("layout_extend") > -1) {
		var treeId = $(item).find("div[type=tree]>ul").attr("id");
		initZTreeObjectForDesigner(treeId);
	}

	if (typeof (id) !== "undefined" && id.indexOf("repeat-list") > -1) {
		sortableComponent();
	}

	if(id && id.indexOf("bfd_panel") > -1) {
		var children = $("[compid=" + id + "]").parents('div[type="layout"]:last .lyrow');
        if(children && children.length === 1) {
			$("[compid=" + id + "]").parents('div[type="layout"]').removeClass('bc-white');
		}
	}

	//if (typeof (id) !== "undefined" && id.indexOf("bfd_panel") > -1) {
	//	$(item).parent().css("background-color", "#f1f3fa");
	//}else{
	//	$(item).parent().css("background-color", "");
	//}
	//} else if ($(item).parent().find("[type=bfd_panel]").length == 0 && !$(item).parent().hasClass("demo")) {
	//	$(item).parent().css("background-color", "#ffffff");
	//}

	//上传组件信息初始化
	initFileinput($(item));	
	
	if (typeof (id) !== "undefined" && id.indexOf("m_switch") > -1) {
		initialize(id);
	}

	//重新计算组件所在容器和原容器的高度	
	var subColumns = $(item).find(".column");
	if(subColumns.length > 0){
		$.each(subColumns,function(index,el){
			layoutResize($(el));	
		});				
	}else{
		layoutResize($(item).parent());
	}
}


/*
	组件排序
 */
function sortableComponent() {
	var sortableComponentOriginalContainer,//组件拖动前所在父容器
		sortableComponentOriginalNextObject,
		sortableComponentOriginalDataSource,//拖动组件原数据源
		sortableComponentOriginalNextClass = "sortableComponentOriginalNext";

	$(".demo,.demo .column").sortable({
		opacity: .35,
		connectWith: ".demo,.column",
		cursorAt: { left: 5 },
		cursor: "move",
		handle: ".draggableHandle",
		placeholder: 'bfd-placeholder',
		forcePlaceholderSize: true,
		forceHelperSize: true,
		dropOnEmpty: true,
		//cancel:".box .column",
		start: function (event, ui) {
			ui.helper.css("width", 100).css("height", 30).css("overflow", "hidden");

			sortableComponentOriginalContainer = $(ui.item).parent();

			var sortableComponentOriginalNextId = "sortableComponentOriginalNext" + getCurrentTime();
			$(ui.item).after('<div class="' + sortableComponentOriginalNextClass + '" id="' + sortableComponentOriginalNextId + '" />');
			sortableComponentOriginalNextObject = $("#" + sortableComponentOriginalNextId);

			sortableComponentOriginalDataSource = $.bfd.ViewModel.component.getComponentDataSource(ui.item);
		},
		stop: function (event, ui) {
			/**
			 * 非布局器组件不能拖到根结点中
			 * */
			var uiItemParent = $(ui.item).parent();
			if ($(ui.item).hasClass("box") && uiItemParent.hasClass("demo")) {
				setTimeout(function () {
					$(sortableComponentOriginalNextObject).after($(ui.item));
					$("." + sortableComponentOriginalNextClass).remove();
					layoutResize(sortableComponentOriginalContainer);
				}, 50);

				return;
			}


			/**
			 * 数据源相同时，如果当前组件是vm模型节点，需要清除模型信息,继承新容器的vm信息。
			 */
			var sortableComponentNewDataSource = $.bfd.ViewModel.component.getComponentParentDataSource(uiItemParent),
				dsLevel = $.bfd.ViewModel.component.getComponentDataSourceLevel(ui.item);

			if (sortableComponentNewDataSource && sortableComponentNewDataSource.uri
				&& sortableComponentNewDataSource.bfd_parent_uri && dsLevel === "self"
				&& sortableComponentNewDataSource.uri !== sortableComponentNewDataSource.bfd_parent_uri
			) {
				sortableComponentNewDataSource.bfd_parent_uri += sortableComponentNewDataSource.uri;
			}

			/**
			 * 如果当前拖动对象本身绑定了数据源，父级数据源相同，则认为相同；
			 * 未绑定数据源时,本层和父级数据源要同时相同，才认为相同。
			 */
			if ($.bfd.ViewModel.component.compareDataSource(sortableComponentOriginalDataSource,
				sortableComponentNewDataSource, dsLevel)
				&& !uiItemParent.hasClass("demo")) {
				$.bfd.ViewModel.component.clearMSController(ui.item);
				$("." + sortableComponentOriginalNextClass).remove();
			}

			/**
			 * 目标容器未绑定数据源，不同时，判断是否是由于目标容器未设置数据源信息
			 * 如果目标数据源为空，判断当前组件是否是vm模型,是vm模型时才移动到目标容器;
			 * 否则继承自上级数据源的布局器组件进入else分支。
			 * */
			else if ($.isEmptyObject(sortableComponentNewDataSource)
				&& !$.isEmptyObject(sortableComponentOriginalDataSource)
				&& $(ui.item).find("[ms-controller][bfd-operation-params]").length > 0
			) {
				$(ui.item).parents("[ms-controller]").removeAttr("ms-controller");
				$("." + sortableComponentOriginalNextClass).remove();
			}

			/**
			 * 原容器绑定有数据源,不同时，提示用户是否要拖动，
			 * 确认拖动，则要清除当前组件的数据源信息；
			 * 不拖动，则将当前组件放回原容器。
			 */
			else if (!$.isEmptyObject(sortableComponentOriginalDataSource)) {
				bootbox.confirm("数据源不一致,确认拖动将会清除当前组件绑定的数据源信息，确认要拖动吗？", function (result) {
					if (result) {
						$.bfd.ViewModel.component.clearChildrenComponentDataField(ui.item)
							.clearMSController(ui.item);
						$("." + sortableComponentOriginalNextClass).remove();
					} else {
						setTimeout(function () {
							$(sortableComponentOriginalNextObject).after($(ui.item));
							$("." + sortableComponentOriginalNextClass).remove();
							layoutResize(sortableComponentOriginalContainer);
						}, 50);
					}
				})
			} else {
				$("." + sortableComponentOriginalNextClass).remove();
			}

						
			/**
			 *重新绑定组件属性面板
			 * */
			var currComponent = $(ui.item);
			clickDemoView(currComponent.children(".view"));
			LayoutStyleProp.setDefaultStyle();

			/**
			 * 组件拖动结束后，初始化组件属性
			 * */
			if (!ui.item.hasClass("box-hide")) {
				setTimeout(function () {
					componentStop(ui.item);
				}, 100);
			}

			//判断如果是加入到最后的布局器，需要重新初始化滚动条
			if (currComponent.parent().hasClass('demo')) {
				var isScrollToBottom = currComponent.prevAll('.mCustomScrollBox')[0],
					$demo = $(".demo_parent");
				if ($demo.hasClass('mCustomScrollbar')) {
					$demo.mCustomScrollbar('destroy');
				}
				
				$demo.mCustomScrollbar({
					theme: window.designFormGrolbalObject.demoMCustomScrollbarTheme,
					callbacks: {
						onScroll: function() {
							$.bfd.formCompOperator.show();
						}
					}
				});

				if (isScrollToBottom) {
					$demo.mCustomScrollbar("scrollTo", "bottom", { scrollInertia: 100 });
				}
			}

			/**
			 *重新计算组件所在容器和原容器的高度
			 * */
			layoutResize(sortableComponentOriginalContainer);

			/**
			 * 拖动标志复位
			 * */
			isDraggableFlag = false;

			/**
			 * 组件溢出时可见
			 */
			ui.item.css("overflow","visible");
		}
	})

	//初始化.footer-bg可排序
	$(".footer-bg").sortable({
		opacity: .35,
		connectWith: ".footer-bg",
		handle: ".drag",
		create: function (event, ui) {

		},
		stop: function (event, ui) {
			initModalDialog(ui);
		}
	})
}

/**
 * 重新计算列宽，解决column中添加组件时高度不一致问题
 * @param selectColumn 选中组件所在列
 * @param selectComponentHeight 选中组件的高度
 */
function layoutResize(selectColumn, selectComponentHeight) {
	if (selectColumn && !selectColumn.hasClass("demo") &&
		selectColumn.hasClass("column")) {
		var maxHeight = 40,
			maxHeightColumn, $selectView;

		if (!selectComponentHeight) {
			$selectView = $(selectColumn).find(".form-component_active");
			$selectView.toggleClass('form-component_active');
		}

		$(selectColumn).parent().children().each(function() {
			var minHeight = $(this).css("min-height");
			$(this).css("padding-top", 0).css("padding-bottom", 0);
			$(this).css("min-height", 0);

			var columnHeight = $(this).outerHeight();
			if (maxHeight < columnHeight) {
				maxHeight = columnHeight;
				maxHeightColumn = $(this);
			}

			$(this).css("min-height", minHeight);
		});

		$(selectColumn).parent().children().each(function() {
			$(this).css("padding-top", 5).css("padding-bottom", 5);
			if ($(this).hasClass('col-sm-12')) {
				$(this).css("min-height", 40);
			} else {
				$(this).css("min-height", maxHeight + 10);
			}
		});

		if (!selectComponentHeight) {
			$selectView.toggleClass('form-component_active');
		}

		//重新计算父容器列高
		var parentLayout = $(selectColumn).parents(".column:first");
		if (parentLayout.length > 0) {
			layoutResize(parentLayout);
		}
	}
}

//初始化对话框信息
function initModalDialog(ui) {
	clickFootView(ui.item.find("div.view"));
	ui.item.addClass("col-md-2");
	var preview = ui.item.find(".preview");
	//默认preview内容为“对话框“+compid
	preview.text(preview.text() + ui.item.find("div[type]").attr("compid"));

	if ($('.footer-bg').html().trim().length > 0) {
		$('.footer-bg').css('background-image', 'none');
	}

	var tagType = $(ui.item).find("div.view:first div[type]:first").attr('type');
	if(tagType === "jsscript" || tagType === "cssscript"){
		$.bfd.guide.bindCranberry($.bfd.guide.script);
	}

	if(tagType === "modal_dialog"){
		$.bfd.guide.bindCranberry($.bfd.guide.dialog);
	}
}


/**
 * 初始化日期组件
 * @param selector
 */
function initDatetimePicker(selector) {
	$(selector).datetimepicker({
		format: 'YYYY-MM-DD HH:mm:ss',
		locale: 'zh-cn',
		useCurrent: false,
		showTodayButton: true
		/* language:  'zh-CN',
		format:'yyyy-mm-dd hh:ii:00',
		weekStart: 1,
		todayBtn:  1,
		autoclose: 1,
		todayHighlight: 1,
		forceParse: 1,
		pickerPosition:"bottom-left",
		minView:0,
		minuteStep:5,
		showMeridian:true,
		initialDate:new Date() */
	});
}

/**
 * 初始化上传组件
 * @param currentComponent
 */
function initFileinput(currentComponent) {
	var btnFileInput = $(currentComponent).find("[type=\"file\"]");
	if (btnFileInput != undefined) {
		$(btnFileInput).fileinput({
			uploadUrl: "jersey-services/layoutit/frame/html/uplaod/",
			allowedFileExtensions: ['jpg', 'png', 'gif'],
			overwriteInitial: false,
			maxFileSize: 1000,
			maxFilesNum: 10,
			//allowedFileTypes: ['image', 'video', 'flash'],
			slugCallback: function (filename) {
				//$(btnFileInput).val(filename);
				return filename.replace('(', '_').replace(']', '_');
			}
		});
	}
}

/**
 * 表单设计器树组件初始化
 * @param treeId
 */
function initZTreeObjectForDesigner(treeId) {
	var myTree = new zTree();
	myTree.callback.onExpand = function (event, treeId, treeNode) {
		layoutResize($("[type=tree][compid=" + treeId + "]").parent().parent().parent());
	}
	myTree.callback.onCollapse = function (event, treeId, treeNode) {
		layoutResize($("[type=tree][compid=" + treeId + "]").parent().parent().parent());
	}
	myTree.callback.onNodeCreated = function (event, treeId, treeNode) {
		layoutResize($("[type=tree][compid=" + treeId + "]").parent().parent().parent());
	}

	myTree.initTree(treeId);
}
/**
 * 初始化路标导航组件
 * @param id
 */
function initWaypoint(id) {
	var waypoint = new LayoutitWaypoint();
	var wayComponent = $("[compid=" + id + "]");
	var setting = wayComponent.attr("waypointsetting");
	var jsonObject = null;
	if (setting) {
		jsonObject = $.parseJSON(decodeURIComponent(setting));
	}
	waypoint.initWaypointBar(wayComponent, jsonObject);
}
/**
 * 初始化区域选择组件
 * @param id
 */
function initChineseRegion(id) {
	$.getJSON('js/lib/chinese-region/bootstrap-chinese-region-areas.json', function (data) {
		for (var i = 0; i < data.length; i++) {
			var area = { id: data[i].id, name: data[i].cname, level: data[i].level, parentId: data[i].upid };
			data[i] = area;
		}

		$("[compid=" + id + "]").find('.bs-chinese-region').chineseRegion('source', data);
	});
}

/**
 * 设计器界面组件初始化
 */
function initComponents() {
	//日期组件初始化
	$(".demo .form_time").each(function () {
		initDatetimePicker(this);
	});

	//区域组件重新加载
	$(".demo [type=chinese_region]").each(function (index, item) {
		initChineseRegion($(item).attr("compid"));
	})

	//上传组件信息初始化
	var fileComponent = new FileUploadComponent();
	fileComponent.sourceCodeOperatorBefore($(".demo"));
	$(".demo div[type=input_fileinput]").each(function () {
		initFileinput(this);
	});

	//文本框,文本域默认值恢复
	$(".demo div[type=input_text],.demo div[type=textarea]").each(function () {
		var defaultValue = decodeURIComponent($(this).attr("defaultvalue"));
		var compid = $(this).attr("compid");
		if (defaultValue != "undefined") {
			$("#" + compid).val(defaultValue);
		}
	});

	//初始化树组件
	$("ul.ztree").each(function () {
		initZTreeObjectForDesigner($(this).attr("id"));
	});
	//多选下拉框初始化
	$(".demo [type=select_dynamic][selecttype=multiple]").each(function () {
		$(this).find("span").remove();
		$(this).find("select").select2();
	})
	//单击字段，更改配置面板
	$('.bindFields .form-panel-body').on("click", "table>tbody>tr>td>input", function (e) {
		configPanel.setDataProperty();
	});

	//初始化面板组件
	if (typeof (bfdPc) !== 'undefined') {
		$(".demo").bfdPanel("init");
	}

	//编辑组件属性
	$('body.edit .demo').unbind("click").on("click", ".lyrow .view,.box .view", function (e) {
		clickDemoView($(this));
		e.stopPropagation();
		//清除属性
	}).on("click", ".remove", function (e) {
		e.preventDefault();
		e.stopPropagation();

		var currentObject = $(this);
		var parentObject = currentObject.parent().parent();
		bootbox.confirm("确认要删除当前组件吗？", function (result) {
			if (result) {
				//组件删除后重新计算column高度
				layoutResize(currentObject.parent().parent(), currentObject.parent().outerHeight());

				currentObject.parent().remove();
				$(".form-layout-east .properties .form-panel-body").empty();
				if (!$(".demo .lyrow").length > 0) {
					clearDemo();
				}
				parentObject.trigger("click");
			}
		});		
	})	
		.on("click", ".add", function (e) {
			e.preventDefault();
			e.stopPropagation();

			var newRow = $(this).parent().clone();
			/**
			 * 重新刷新组件ID
			 */
			$(newRow).find("[id]").each(function (index, item) {
				var container = $(newRow).find("[compid=" + $(item).attr("id") + "]:first");
				if (container && container.length > 0) {
					var id = $(container).attr("type") + getCurrentTime() + index;
					$(container).attr("compid", id).attr("compname", id);
					$(item).attr("id", id).attr("name", id);
				} else if ($(item).attr("type")) {
					var id = $(item).attr("type") + getCurrentTime() + index;
					$(item).attr("id", id).attr("name", id).attr("compid", id).attr("compname", id);
				}
			});

			/**
			 * 清除模型字段信息
			 */
			$.bfd.ViewModel.component.clearChildrenComponentDataField(newRow);
			$.bfd.ViewModel.component.clearMSController(newRow);

			$(newRow).insertAfter($(this).parent());
			//界面初始化时绑定sortable事件
			sortableComponent();
		});

	/**
	 * 注册删除事件	 
	 */
	$(document).on("keydown", function (e) {
		var ignoredArray = ["INPUT","TEXTAREA"];		
		if(e.keyCode === 46 && $.inArray(e.target.nodeName,ignoredArray) === -1){
			var $footerRemoveObj = $(".footer-bg .form-component_active").parent().find(".remove:first");
			if($footerRemoveObj.length > 0){
				$footerRemoveObj.trigger('click');
			}

			var $formRemoveObj = $(".demo .form-component_active").parent().find(".remove:first");			
			if($formRemoveObj.length > 0){
				$(".form-component-operator .delete-comp").trigger('click');
			}
		}		
	});


	//注册页面滚动条
	$(".demo_parent").mCustomScrollbar({
		theme: window.designFormGrolbalObject.demoMCustomScrollbarTheme,
		callbacks: {
			onScroll: function() {
				$.bfd.formCompOperator.show();
			}
		}
	});


	/**
	 * 生成表单
	 */
	$("#btnGenerateTemplate").unbind("click").on("click", function () {
		FormViewTemplatesManager.generate();
		hideModalDialog("relationModelConfigDialog");
		$(".demo .view>[type!=layout]").parent().parent().parent().each(function () {
			layoutResize($(this));
		})
		sortableComponent();
	})

	$('.footer-bg').unbind("click").on("click", ".box-hide .preview", function (e) {
		clickFootView($(this).next());
		e.stopPropagation();
		//清除属性
	}).on("click", ".remove", function (e) {
		e.preventDefault();
		var currentObject = $(this);
		bootbox.confirm("确认要删除当前组件吗？", function (result) {
			if (result) {
				currentObject.parent().remove();
				if ($('.footer-bg').html().trim().length === 0) {
					$('.footer-bg').css('background-image', '');
				}
				$(".form-layout-east .properties .form-panel-body").empty();
			}
		});
		//编辑自定义布局设置
	});

	//初始化引导功能
	$.bfd.guide.bindCranberry($.bfd.guide.frame);

	//格式化页面布局
	$(".demo .column").each(function(index, el) {
		layoutResize($(el));
	});

	$.bfd.formCompOperator.show();
}
/**
 * 初始化数据源信息
 */
function initDataSourceInfo(dsName) {
	/** 
	 *如果页面是通过zStudio定义时，则只添加数据模型相关数据源
	 */
	var modelid = getUrlParam('dmid', window.location.search);
	if (modelid) {
		var dmSource = $.bfd.datasource.ormSingleTable.buildDataSource(currentProject, dsName, true);
		$.bfd.datasource().init(dmSource);
	} else {
		/**
		 * 初始化orm数据源
		 */
		var datas = $.bfd.datasource.ormSingleTable.buildDataSource(currentProject, dsName);
		$.bfd.datasource().init(datas);

		/**
		 * 追加自定义数据源
		 */
		var jsonDatas = $.bfd.datasource.datasourceForJson.buildDataSource(currentProject, dsName);
		$.bfd.datasource().appendData(jsonDatas);
	}
}

function initFrame() {
	//加载数据源
	initDataSourceInfo();

	//if (!getUrlParam(designFormGrolbalObject.commonconst.processid, window.location.search)) {
	//	if(!getUrlParam(designFormGrolbalObject.commonconst.datamodelid, window.location.search)){
	//		
	//	}
	//	
	//}

	//界面初始化时绑定sortable事件
	sortableComponent();

	//组件拉动事件注册
	dragComponent();

	//组件初始化
	initComponents();

	configurationElm();

	// tab组件注册事件
	if (typeof (tabClickEvent) != 'undefined') {
		tabClickEvent();
	}

}

$(document).ready(function () {
	//$("body").css("min-height", $(window).height() - 110);
	//$(".demo").css("min-height", $(window).height() - 180);

	//加载工程
	loadCurrentProject();

	$(".form-layout-west .form-panel .title").off('click').on('click', function () {
		var $this = $(this);
		$this.next().slideToggle("normal");
	});
	if (location.search.indexOf("file=") != -1) {
		$("#button-jsedit").attr("href", 'html/editor.html?mode=js&tenantid=' + location.search.substring(6, location.search.indexOf("%")));
		$("#button-cssedit").attr("href", 'html/editor.html?mode=css&tenantid=' + location.search.substring(6, location.search.indexOf("%")));
	}
});


; (function ($, win) {
	var setting = {
		sysdata: 'systemdata'
	}

	var _chooseComponent = function (node) {
		var htmlBits = "";
		var compStyle = node.companentType;
		var divAttr = 'editable="%7B%22add%22%3A%22checked%22%2C%22view%22%3A%22%22%2C%22modify%22%3A%22checked%22%7D" field="' + node.column + '" defaultvalue="' + node.defaultVal + '"';
		var compAttr = 'ms-duplex-string="' + node.column + '"';
		var checkboxAttr = 'name="sports" type="checkbox" ms-duplex-number="' + node.column + '_form_compute"';
		htmlBits += '<div class="box box-element ui-draggable" style="display: block;">';
		htmlBits += '<a href="#close" class="remove label label-danger"><i class="glyphicon-remove glyphicon"></i></a>';
		htmlBits += '<div class="preview">' + node.compStyle + '</div><div class="view draggableHandle">';
		if (compStyle == '文本框') {
			htmlBits += '<div type="input_text" ' + divAttr + ' ><input type="text" class="form-control" ' + compAttr + '></div></div></div>';
		} else if (compStyle == '文本域') {
			htmlBits += '<div type="textarea" ' + divAttr + '><textarea class="form-control" rows="2" ' + compAttr + '></textarea></div></div></div>';
		} else if (compStyle == '下拉框') {
			htmlBits += '<div type="select_dynamic" init="true" ' + divAttr + '>';
			htmlBits += '<select style="display : inline;width:100%;" class="form-control" ' + compAttr + '><option>下拉框选项1</option><option>下拉框选项2</option></select></div></div></div>';
		} else if (compStyle == '单选框') {
			htmlBits += '<div type="input_radio" init="true" class="form-control" ' + divAttr + '>';
			htmlBits += '<input name="fruit" type="radio" value="1" ' + compAttr + '/>选项1<input name="fruit" type="radio" value="2" ' + compAttr + '/>选项2</div></div></div>';
		} else if (compStyle == '多选框') {
			htmlBits += '<div type="checkbox" init="true" class="form-control" ' + divAttr + '>';
			htmlBits += '<input ' + checkboxAttr + ' value="football" /><span>选项1</span>';
			htmlBits += '<input ' + checkboxAttr + ' value="basketball" /><span>选项2</span><input ' + checkboxAttr + ' value="baseball" /><span>选项3</span></div></div></div>';
		} else if (compStyle == '日期') {
			htmlBits += '<div type="input_datetime" vcontent="date%3A%7Bformat%3A%20' + '\'' + 'YYYY-MM-DD%20h%3Am%3As' + '\'' + '%7D" datetimeformat="YYYY-MM-DD%20HH%3Amm%3Ass" vtype="datetime" ' + divAttr + '>';
			htmlBits += '<input class="form-control form_time" placeholder="YYYY-MM-DD HH:mm:ss" datetimeformat="YYYY-MM-DD%20HH%3Amm%3Ass" vcontent="date%3A%7Bformat%3A%20' + '\'' + 'YYYY-MM-DD%20h%3Am%3As' + '\'' + '%7D" vtype="datetime" type="text" ' + compAttr + '></div></div></div>';
		} else if (compStyle == '上传') {
			htmlBits += '<div type="input_fileinput" fieldtype=' + node.colSty + ' field=' + node.column + ' init="true">';
			htmlBits += '<input type="file" class="file"  data-show-preview="false" /></div></div></div>';
		}
		return htmlBits;
	}



	var getCompType = function (defaultCompType, compType) {
		if (compType == "") {
			return defaultCompType;
		} else {
			switch (compType) {
				case 'label':
					return '标签';
					break;
				case 'input_text':
					return '文本框';
					break;
				case 'textarea':
					return '文本域';
					break;
				case 'select_dynamic':
					return '下拉框';
					break;
				case 'input_radio':
					return '单选框';
					break;
				case 'checkbox':
					return '多选框';
					break;
				case 'input_datetime':
					return '日期';
					break;
				case 'input_fileinput':
					return '上传';
					break;
				default:
					previewIcon = '';
			}
		}
	}
	/**
	 * 循环遍历数据项字段生成表单可用的数据结构
	 */

	var dataStructure = function (data) {
		var array = [];
		$.each(data, function (index, value) {
			var processid = value.process_package_id,
				datacolumn = value.metadata,
				groupMap = value.groupMap,
				modelname = value.name,
				modelid = value.id,
				transitionArray = [],
				valArray = [],
				dataBlockArray = [];

			dataBlockArray = removeDuplicatedItem(datacolumn);
			for (var i = 0; i < dataBlockArray.length; i++) {
				var arr = [],
					startArray = [],
					endArray = [];
				for (var j = 0; j < datacolumn.length; j++) {
					if (dataBlockArray[i] == datacolumn[j].dataBlock) {
						var dataBlock = datacolumn[j].dataBlock,
							columnname = datacolumn[j].item_id,
							name = datacolumn[j].item_name,
							visible = datacolumn[j].ui_visible,
							enumerateType = dataModelColumnDataMapping.itemColumnTypeDataMappingValue(datacolumn[j].item_type),
							compType = dataModelColumnDataMapping.itemCompanentCompanentTypeDataMappingValue(datacolumn[j].component_type),
							colType = "",
							companentType = "",
							defaultVal = datacolumn[j].item_default,
							layout = datacolumn[j].layout;
						if (defaultVal == null) {
							defaultVal = "";
						}
						if (enumerateType == '整数') {
							companentType = getCompType("文本框", compType);
							colType = "int";
						} else if (enumerateType == '浮点型') {
							companentType = getCompType("文本框", compType);
							colType = "double";
						} else if (enumerateType == '短文本') {
							companentType = getCompType("文本框", compType);
							colType = "string";
						} else if (enumerateType == '长文本') {
							companentType = getCompType("文本域", compType);
							colType = "string";
						} else if (enumerateType == '日期') {
							companentType = getCompType("日期", compType);
							colType = "date";
						} else if (enumerateType == '逻辑型') {
							companentType = getCompType("下拉框", compType);
							colType = "boolean";
						}

						var length = datacolumn[j].item_lenth,
							id = new Date().getTime() + parseInt(100 * Math.random()),
							required = datacolumn[j].required,
							columnObj = { "id": id, "pId": modelid, "name": name, "column": columnname, "companentType": companentType, "colType": colType, "length": length, "required": required, "defaultVal": defaultVal, "visible": visible, "layout": layout, "dataBlock": dataBlock };

						if (visible) {
							startArray.push(columnObj);
						} else {
							endArray.push(columnObj);
						}
					}

				}
				arr = startArray.concat(endArray);
				if (i == 0) {
					arr.unshift({ "id": modelid, "name": modelname, "type": "processdata", "open": false });
				} else {
					arr.unshift({ "id": modelid, "name": groupMap[dataBlock], "type": "processdata", "open": false });
				}
				array.push(arr);
			}
			/*$.each(datacolumn, function(index,column){
				debugger;
				var datablock = column.dataBlock;
				var columnname = column.item_id;
				var name = column.item_name;
				var visible = column.ui_visible;
				var enumerateType = dataModelColumnDataMapping.itemColumnTypeDataMappingValue(column.item_type);
				var compType = dataModelColumnDataMapping.itemCompanentCompanentTypeDataMappingValue(column.component_type);
				var colType = "";
				var companentType = "";
				var defaultVal = column.item_default;
				var layout = column.layout;
				if(defaultVal == null){
					defaultVal = "";
				}
				if(enumerateType == '整数'){
					companentType = getCompType("文本框",compType);
					colType = "int";
				}else if(enumerateType == '浮点型'){
					companentType = getCompType("文本框",compType);
					colType = "double";
				}else if(enumerateType == '短文本'){
					companentType = getCompType("文本框",compType);
					colType = "string";
				}else if(enumerateType == '长文本'){
					companentType = getCompType("文本域",compType);
					colType = "string";
				}else if(enumerateType == '日期'){
					companentType = getCompType("日期",compType);
					colType = "date";
				}else if(enumerateType == '逻辑型'){
					companentType = getCompType("下拉框",compType);
					colType = "boolean";
				}

				var length = column.item_lenth;
				var id = new Date().getTime() + parseInt(100*Math.random());
				var required = column.required;
				var columnObj = { "id":id, "pId":modelid, "name":name,"column":columnname,"companentType":companentType,"colType":colType,"length":length,"required":required,"defaultVal":defaultVal,"visible":visible,"layout":layout,"dataBlock":dataBlock};
				
				if(visible){
					startArray.push(columnObj);
				}else{
					endArray.push(columnObj);
				}
				
			});
			valArray = startArray.concat(endArray);
			valArray.unshift({"id":modelid,"name":modelname,"type":"processdata","open":false});
			transitionArray = array.concat(valArray)
			array = [];
			array = transitionArray;*/
		});
		return array.reverse();
	}


	/*数组去重方法*/
	var removeDuplicatedItem = function (ar) {
		var tmp = {},
			ret = [];

		for (var i = 0, j = ar.length; i < j; i++) {
			if (!tmp[ar[i].dataBlock]) {
				tmp[ar[i].dataBlock] = 1;
				ret.push(ar[i].dataBlock);
			}
		}

		return ret.sort();
	}

	var _processItemData = function (node) {
		var tmp = [],
			previewIcon = '';
		if (node.pId === setting.sysdata) {
			previewIcon = 'system-data.png';
		}
		else {
			var companentType = node.companentType;
			switch (companentType) {
				case '文本框':
					previewIcon = 'text-area.png';
					break;
				case '文本域':
					previewIcon = 'text-field.png';
					break;
				case '下拉框':
					previewIcon = 'dropdown.png';
					break;
				case '单选框':
					previewIcon = 'radio.png';
					break;
				case '多选框':
					previewIcon = 'checkbox.png';
					break;
				case '日期':
					previewIcon = 'date.png';
					break;
				case '上传':
					previewIcon = 'upload.png';
					break;
				default:
					previewIcon = 'custom.png';
			}
		}
		tmp.push('<div class="lyrow restoremark" node="node">' +
			'<a href="#close" class="remove label label-danger"><i class="glyphicon-remove glyphicon"></i></a>');
		tmp.push('<div class="preview"><div class="img-left"><img src="img/frame/icon/' + previewIcon + '" /></div>' + node.name + '</div>');
		tmp.push('<div class="view">' +
			'<div type="layout" ratio="4,8">' +
			'<div class="row clearfix">' +
			'<div class="col-md-4 col-xs-4 col-sm-4 col-lg-4 column" style="padding-bottom: 21px;">' +
			'<div class="box box-element ui-draggable" style="display: block;">' +
			'<a href="#close" class="remove label label-danger showRemove"><i class="glyphicon-remove glyphicon"></i></a>' +
			'<div class="preview">标签</div>' +
			'<div class="view draggableHandle form-component_active">' +
			'<div type="label"  lablefontsize="16" labelfontweight="false" labelfontcolor="" class="layout-align-right">' +
			'<label class="control-label">' + node.name + '</label>' +
			'</div>' +
			'</div>' +
			'</div>' +
			'</div>'); //col-4布局结束
		if (node.pId === setting.sysdata) {
			tmp.push('<div class="col-md-8 col-xs-8 col-sm-8 col-lg-8 column" style="padding-bottom: 21px;">' +
				'<div class="box box-element ui-draggable" style="display: block;">' +
				'<a href="#close" class="remove label label-danger showRemove"><i class="glyphicon-remove glyphicon"></i></a>' +
				'<div class="preview">标签</div>' +
				'<div class="view draggableHandle form-component_active">' +
				'<div type="label" field=' + node.column + ' lablefontsize="16" labelfontweight="false" labelfontcolor="" class="layout-align-right">' +
				'<label class="control-label" ms-text="' + node.column + '">' + node.column + '</label>' +
				'</div>' +
				'</div>' +
				'</div>' +
				'</div></div>' + //col-8布局结束
				'</div></div></div>');
		} else {
			tmp.push('<div class="col-md-8 col-xs-8 col-sm-8 col-lg-8 column" style="padding-bottom: 5px;">' + _chooseComponent(node) + '</div></div></div></div></div>');
		}
		return tmp.join(' ');
	}

	var _processData = function (data) {
		var $sysPanel = $("#process-sysdata"),
			$processPanel = $("#process-procdata");
		$.each(data, function (index, item) {
			if (item.pId) {
				if (item.pId === setting.sysdata) {
					$sysPanel.children('.body').append(_processItemData(item));
				}
				else {
					$processPanel.children('.body').append(_processItemData(item));
				}
			}
		});
		//组件拉动事件注册
		dragComponent();
	}

	var _modelData = function (data) {
		var html = [];
		html.push('<div class="form-panel">');
		html.push('<div class="title">');
		html.push('<em class="glyphicon glyphicon-th-large icon1"></em>');
		if (data instanceof Array) {
			html.push('<span>' + data[0].name + '</span>');
		} else {
			html.push('<span>' + data.name + '</span>');
		}

		html.push('</div>');
		html.push('<div class="body">');
		if (data instanceof Array) {
			$.each(data, function (index, item) {
				if (item.pId) {
					if (item.pId !== setting.sysdata) {
						html.push(_processItemData(item));
					}
				}
			});
		} else {
			if (data.pId) {
				if (data.pId !== setting.sysdata) {
					html.push(_processItemData(data));
				}
			}
		}

		html.push('</div>');
		html.push('</div>');
		$("#process-procdata").after(html.join(' '))
		//组件拉动事件注册
		dragComponent();
	}

	var sysdataLoad = function () {

		/**********************************************/
		var processid = getUrlParam('processId', window.location.search),
			modelid = "",
			swaggerData = "",
			datacollection = "",
			dataarray = [],
			modelDataUrl = "",
			swaggerDataUrl = "",
			dataSourcePath = "";
		//实验msb数据源用的是dmid传值没有用processid所以在此处做判断。
		if (processid == null) {
			//modelDataUrl = "json-extension/msbdatademo/modelData.json";
			//swaggerDataUrl = "json-extension/msbdatademo/swaggerData.json";
			modelid = getUrlParam('dmid', window.location.search);
			$.ajax({
				type: "get",
				url: "/workbench/model/api/def?model-id=" + modelid,
				async: false,
				dataType: "json",
				success: function (data) {
					var processdata = dataStructure(data);
					for (var i = 0; i < processdata.length; i++) {
						_modelData(processdata[i]);
					}
					initDataSourceInfo(undefined);
				},
				error: function () {
					bootbox.alert("流程数据源请求失败")
				}
			});

		} else {
			modelDataUrl = "/workbench/model/api/def?process-package-id=" + processid;
			swaggerDataUrl = "/workbench/model/api/operate?process-package-id=" + processid;
			$.ajax({
				type: "get",
				url: modelDataUrl,
				async: true,
				dataType: "json",
				success: function (data) {
					modelid = data[0].id;
					datacollection = "/" + modelid;
					dataarray = data[0].metadata;
					var processdata = dataStructure(data);
					for (var i = 0; i < processdata.length; i++) {
						_modelData(processdata[i]);
					}
					//_processData(processdata);
					if (processid != null) {
						swaggerDataUrl = swaggerDataUrl + "&model-id=" + modelid;
					}
					$.ajax({
						type: "get",
						url: swaggerDataUrl,
						async: true,
						dataType: "json",
						success: function (data) {
							swaggerData = data;
							getDatasource(swaggerData, modelid, datacollection, dataarray);
						},
						error: function () {
							bootbox.alert("请求数据项失败")
						}
					});
				},
				error: function () {
					bootbox.alert("加载数据项失败")
				}
			});
		}




		/**********************************************/
		/*$.ajax({
			type:"get",
			url:"json-extension/bcp/sysdata.json",
			async:false,
			success:function(data){
				_processData(data);
			}
		});
		$.ajax({
			type:"get",
			url:'json-extension/bcp/processdata.json',//+designFormGrolbalObject.process.id+'data.json',
			async:false,
			success:function(data){
				_processData(data);
			}
		})*/
	}

	var getDatasource = function (swaggerData, modelid, datacollection, dataarray) {
		$.ajax({
			type: "post",
			url: "jersey-services/layoutit/frame/MSB2BFDModel/" + modelid,
			async: true,
			dataType: "json",
			data: JSON.stringify(swaggerData),
			contentType: "application/json",
			success: function (data) {
				dataSourcePath = data;
				initDataSourceInfo(modelid);
				$.bfd.datasource().updateDataSetFields(modelid, modelid, datacollection, dataarray);
			},
			error: function () {
				bootbox.alert("流程数据源请求失败")
			}
		});
	}

	$(function () {
		designFormGrolbalObject.datamodel.id = getUrlParam(designFormGrolbalObject.commonconst.datamodelid, window.location.search);
		//designFormGrolbalObject.process.id = getUrlParam(designFormGrolbalObject.commonconst.processid, window.location.search);
		//if(designFormGrolbalObject.datamodel.id == 'qingjia') {
		if (designFormGrolbalObject.datamodel.id) {
			$("#new,#edit,#btnSaveAsMenu,#btnExport,#project,#button-datasourceset").css("display", "none");
			//$("#process-procdata").css('display', '');
			sysdataLoad();
			$("#process-procdata").find('div:first').find('span').html('数据字段');
		}else{
			$("#button-back").hide();
		}
		
		/*else if(designFormGrolbalObject.process.id){
			$("#new,#edit,#btnSaveAsMenu,#btnExport,#project,#button-datasourceset").css("display","none");
			//$("#process-sysdata,#process-procdata").css('display', '');
			$("#process-procdata").css('display', '');
			sysdataLoad();
		}*/
	});
})(jQuery, window);