<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:util="http://www.springframework.org/schema/util"
xmlns:tx="http://www.springframework.org/schema/tx"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
">

<!--读取外部的属性文件配置参数 -->

<bean id="databaseProperty"   
   class="org.springframework.beans.factory.config.PropertiesFactoryBean">  
   <property name="locations">  
      <list>  
        <value>classpath:db.properties</value>  
      </list>  
    </property>  
 </bean>
 
  <bean id="defaultDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
         <property name="driverClassName" value="${jdbc.driverClassName}" />
         <property name="url" value="${jdbc.url}" />
         <property name="username" value="${jdbc.username}" />
         <property name="password" value="${jdbc.password}" />          
            <property name="maxActive"><value>20</value></property>  
            <property name="initialSize"><value>1</value></property>  
            <property name="maxWait"><value>60000</value></property>  
            <property name="maxIdle"><value>20</value></property>  
            <property name="minIdle"><value>3</value></property>  
            <property name="removeAbandoned"><value>true</value></property>  
            <property name="removeAbandonedTimeout"><value>180</value></property> 
            <property name="testOnBorrow" value="false"/>
    </bean>
    
    <!--  
        2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源  

        MyBatis定义数据源,同意加载配置  
    -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="defaultDataSource"></property>
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="mapperLocations" value="classpath*:com/zte/**/*Mapper.xml"/>
        <!-- 
        <property name="configLocation" value="classpath:mybatis-config.xml" />   
         -->
    </bean>  
  
    <!--  
        3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory  
  
        basePackage:指定sql映射文件/接口所在的包（自动扫描）  
    --> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">      
        <property name="basePackage" value="com.zte.*" />
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/> 
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>  
    <!-- 
        4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源 
    -->  
    <bean id="txManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="defaultDataSource"></property>  
    </bean>
  
    <!-- 5. 使用声明式事务  
         transaction-manager：引用上面定义的事务管理器  
     -->  
    <tx:annotation-driven transaction-manager="txManager" />
    
    <!-- 6. 这里的mapperInterface需要接口类型 -->  
    <!--  <bean id="generalMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
        <property name="mapperInterface" value="com.zte.ums.bcp.orm.dao.GeneralMapper" />  
        <property name="sqlSessionFactoryBeanName" ref="sqlSessionFactory" />
    </bean>   --> 
</beans>